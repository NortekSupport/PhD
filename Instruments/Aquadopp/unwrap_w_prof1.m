function w1=unwrap_w_prof1(w,wmx,ih);% function w1=unwrap_w_prof1(w,wmx,ih);%% matlab function to unwrap velocities measured by pulse-coherent ADCP,%   using differences between rangebins to make phase wraps more obvious.  % Pre:  w(ii,jj)=measured velocity at ii'th time, jj'th rangebin.%       wmx=maximum measureable velocity (i.e. ambiguity velocity);%       ih(ii)=index of rangebin at which velocity is assumed to not be%         wrapped.  If ih not specified, last rangebin (highest value of %         jj) assumed to be not wrapped, which is likely the case for %         downward-looking aquadopp. %         Probably want to fliplr(w) if aquadopp was upward-looking;% Post: w1(ii,jj)=unwraped velocity at ii'th time, jj'th rangebin.  if ~exist('ih')    ih=size(w,2)*ones(size(w,1),1);endbad_inds=find(isnan(w));w1=w;for ii=1:size(w,1)    if ih(ii)+1<=size(w1,2) & ih(ii)>0        w1(ii,ih(ii)+1:size(w1,2))=w1(ii,ih(ii));    end    for jj=ih(ii)-1:-1:1        dw=w1(ii,jj)-w1(ii,jj+1);        dw=mod(dw+wmx,2*wmx)-wmx;        w1(ii,jj)=w1(ii,jj+1)+dw;    endendfor jj=size(w1,2)-1:-1:1    dw=w1(:,jj)-w1(:,jj+1);    dw=interp_nan(dw,1,1);    dwm=my_running_median(dw,5);    dw=mod(dw-dwm+wmx,2*wmx)+dwm-wmx;    w1(:,jj)=w1(:,jj+1)+dw;endfor jj=size(w1,2):-1:1    wm=my_running_median(w1(:,jj),5);    w1(:,jj)=mod(w1(:,jj)-wm+wmx,2*wmx)+wm-wmx;endw1(bad_inds)=nan;